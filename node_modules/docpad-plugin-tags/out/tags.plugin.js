// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var TagsPlugin;
    return TagsPlugin = (function(_super) {
      __extends(TagsPlugin, _super);

      TagsPlugin.prototype.name = 'tags';

      TagsPlugin.prototype.tags = null;

      TagsPlugin.prototype.config = {
        relativeDirPath: "tags",
        extension: ".json",
        injectDocumentHelper: null,
        collectionName: "tags",
        findCollectionName: "database",
        logLevel: 'info'
      };

      function TagsPlugin() {
        if (this.tags == null) {
          this.tags = {};
        }
        TagsPlugin.__super__.constructor.apply(this, arguments);
      }

      TagsPlugin.prototype.extendCollections = function() {
        var config, docpad, plugin;
        plugin = this;
        config = this.getConfig();
        docpad = this.docpad;
        docpad.setCollection(config.collectionName, docpad.getDatabase().findAllLive({
          relativeDirPath: {
            $startsWith: config.relativeDirPath
          }
        }, [
          {
            title: 1
          }
        ]));
        docpad.getCollection(config.findCollectionName).on('add change:tags', function(model) {
          var tag, tags, _base, _i, _len;
          tags = model.get('tags') || [];
          if (typeof tags === 'string') {
            tags = tags.split(/[\s,]+/);
          }
          if (tags.length === 0) {
            return;
          }
          for (_i = 0, _len = tags.length; _i < _len; _i++) {
            tag = tags[_i];
            if ((_base = plugin.tags)[tag] == null) {
              _base[tag] = plugin.createTagDocument(tag, function(err) {
                if (err) {
                  return docpad.error(err);
                }
              });
            }
          }
          return true;
        });
        return this;
      };

      TagsPlugin.prototype.createTagDocument = function(tag, next) {
        var config, docpad, document, documentAttributes, plugin, tagName, _ref;
        plugin = this;
        config = this.getConfig();
        docpad = this.docpad;
        document = docpad.getFile({
          tag: tag
        });
        tagName = tag.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
        documentAttributes = {
          data: JSON.stringify({
            tag: tag
          }, null, '\t'),
          meta: {
            mtime: new Date(),
            title: "Tag: " + tag,
            tag: tag,
            tagName: tag,
            relativePath: "" + config.relativeDirPath + "/" + tagName + config.extension
          }
        };
        if (document != null) {
          document.set(documentAttributes);
        } else {
          document = docpad.createDocument(documentAttributes);
        }
        if ((_ref = config.injectDocumentHelper) != null) {
          _ref.call(plugin, document);
        }
        document.action('load', function(err) {
          if (err) {
            return next(err);
          }
          (typeof docpad.addModel === "function" ? docpad.addModel(document) : void 0) || docpad.getDatabase().add(document);
          docpad.log(config.logLevel, "Created tag page for " + tag + " at " + (document.getFilePath()));
          return next();
        });
        return document;
      };

      return TagsPlugin;

    })(BasePlugin);
  };

}).call(this);
